<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zeroT dev - CJTozer&#39;s Blog</title>
  <subtitle>Software Development, Developing as a Developer, and Developing Developers</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://zerotdev.com/"/>
  <updated>2017-08-22T11:46:43.320Z</updated>
  <id>https://zerotdev.com/</id>
  
  <author>
    <name>Chris Tozer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Software Architecture Recommendations</title>
    <link href="https://zerotdev.com/2017/08/22/Software-Architecture-Recommendations/"/>
    <id>https://zerotdev.com/2017/08/22/Software-Architecture-Recommendations/</id>
    <published>2017-08-22T11:46:14.000Z</published>
    <updated>2017-08-22T11:46:43.320Z</updated>
    
    <content type="html"><![CDATA[<p>I've started reading a book that's been lying round my office untouched: <em>Software Architecture in Practice</em><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.  I'm putting some thoughts in this blog almost entirely for my own benefit.  I'm hoping to:</p>
<ul>
<li>Force myself to think about things by writing them down</li>
<li>Distill some of the interesting pieces down to a small volume so I can easily revisit</li>
<li>Check that as we go about building our upcoming new product, we are bearing these things in mind</li>
</ul>
<h2 id="notes-from-chapter-1-3-what-makes-a-good-architecture">Notes from Chapter 1.3 - <em>What Makes a &quot;Good&quot; Architecture?</em></h2>
<p>So, my first notes come from some general recommendations for the architecture, first for the process side of things, which I'll distill as:</p>
<ul>
<li>The architecture should be the product of one or a few minds (and there should be an identified leader)</li>
<li>The architect (or team) should have functional requirements and an articulated, prioritized list of quality attributes (e.g. security, performance)</li>
<li>The architecure should be documented in a way that's easily digestible by all stakeholders.  These stakeholders should be actively involved in the architecture's review.</li>
<li>The architecture should be analyzed for quantitative measures (e.g. max throughput), before it's too late to make changes</li>
<li>The architecture should be able to be implemented as a 'skeleton' first - to exercise communication paths with minimal function thereby easing ongoing integration effort.</li>
<li>&quot;Resource contention areas&quot; should be clearly identified, and the proposed plan circulated and upheld.  For example if disk access is a big concern, guidelines need to be in place for how each sub-component must minimise its disk usage.</li>
</ul>
<p>Then there are some recommendations for the structure itself:</p>
<ul>
<li>Separate responsibilities into different modules</li>
<li>Define interfaces to encapsulate each module</li>
<li>Data producers and data consumers should be separated</li>
<li>Minimise the number of different interaction patterns, and try to keep them simple</li>
</ul>
<p>I think the structure points are things that we are doing already - but it's always nice to see them written down and formalized in a new way.  The process points I think are much more interesting, and there's some scope to dig into which of these that we're not doing could help us reduce risk as we go forwards - particularly thinking up-front about quantitative values, and how to deal with potential bottlenecks.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Len Bass, Paul Clements and Rick Kazman - <em>SEI Series in Software Engineering</em> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      Starting out with the book &quot;Software Architecture in Practice&quot;
    
    </summary>
    
    
      <category term="architecture" scheme="https://zerotdev.com/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>Continuous Integration Design</title>
    <link href="https://zerotdev.com/2017/03/13/Continuous-Integration-Design/"/>
    <id>https://zerotdev.com/2017/03/13/Continuous-Integration-Design/</id>
    <published>2017-03-13T22:18:51.000Z</published>
    <updated>2017-08-22T09:52:09.891Z</updated>
    
    <content type="html"><![CDATA[<p>For my day job, we're currently building a high-performance system, pretty much from scratch.  One of the challenges facing us lately has been considering how to test this new system - and during the initial thinking we struck on something I thought I'd share.</p>
<p><em>Some context here - the various products I've worked on over the years have <s>almost</s> exclusively been harder to test than they are to write.  Sometimes this is the nature of the beast, but often it comes down to bad design.  This blog post isn't trying to tell you the right way to do CI design - but it is a few things to think about that are often overlooked, and in my experience can contribute to the 'badness' of many test frameworks.</em></p>
<h1 id="use-cases">Use Cases</h1>
<p>This is a common thing to do in many walks of software development, but one I've never seen applied to test or CI frameworks - and now it's been planted in my brain I can't stop thinking how important this is to ensuring success.</p>
<p>It's easy to assume that your CI pipeline is something like:</p>
<blockquote>
<p>Developer checks in a fix, build passes or fails</p>
</blockquote>
<p>...but is that really all there is to the story?  When I started thinking about it, there were very many more potential users/use cases for our CI system.  To get you thinking, here's some ideas broken down into users...</p>
<h2 id="developer">Developer</h2>
<ul>
<li>makes functional bug fix, adds new test for it</li>
<li>makes performance improvement, measures improvement</li>
<li>adds feature, adds performance test for it and checks other performance tests for regressions</li>
</ul>
<h2 id="maintainer">Maintainer</h2>
<ul>
<li>checks performance improvement/degradation over time - can pinpoint bad commits</li>
<li>checks quality of product before releasing</li>
</ul>
<h2 id="tester">Tester</h2>
<ul>
<li>has confidence in product being delivered for testing</li>
<li>knows what's already been tested, so doesn't need to cover the same ground</li>
<li>adds test for new functional/performance area that devs didn't think of</li>
</ul>
<h2 id="product-manager-sales">Product Manager (/Sales?)</h2>
<ul>
<li>presents detailed performance data to customer prospect</li>
<li>spins up a demo of the system performing superbly under high load</li>
</ul>
<hr>
<p>So, that's just the things off the top of my head.  From thinking like this, it was immediately clear to me how the previous frameworks I'd worked with just didn't fit the bill.  I'm really hoping we're able to make all of these use cases a success!</p>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>I've found thinking about use cases really helpful.  Have you tried it?  What interesting use cases have I missed?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For my day job, we&#39;re currently building a high-performance system, pretty much from scratch.  One of the challenges facing us lately has
    
    </summary>
    
    
      <category term="continuous integration" scheme="https://zerotdev.com/tags/continuous-integration/"/>
    
  </entry>
  
  <entry>
    <title>Set a Goal</title>
    <link href="https://zerotdev.com/2017/03/06/Set-a-Goal/"/>
    <id>https://zerotdev.com/2017/03/06/Set-a-Goal/</id>
    <published>2017-03-06T23:48:56.000Z</published>
    <updated>2017-08-22T09:52:09.891Z</updated>
    
    <content type="html"><![CDATA[<p>I'm going to begin this post with a little bit about my story.  I - like a lot of people I know - spent quite a number of my formative years not setting myself any clear goals.  This involved a combination of drifting through, and having goals imposed on you from the outside.</p>
<p>This was true through school, university, and quite a while at the start of my career.  If there's one thing I'd like you to take away from this post it's this:</p>
<blockquote>
<p>You can set your own goals</p>
</blockquote>
<p>Go on - try it!</p>
<p>It can be anything.  And I really mean that - if you're aiming for something specific, it doesn't have to be dramatic or meaningful; you can still get a great feeling of progress, and some extra motivation, by setting yourself a clear goal and working towards it.</p>
<p>If you're a manager or a mentor, then you should absolutely be doing all you can to encourage your team to set their own goals.</p>
<h1 id="some-thoughts-on-goals">Some Thoughts on Goals</h1>
<ul>
<li>Be as specific as possible - and make sure you have a clear way to measure progress</li>
<li>Write your goals down, in black and white - and share them with people who can help you succeed (or just people who care about you and your success). For most goals, just telling someone else you have these goals is potentially a strong motivator</li>
<li>Goals are much more likely to be successful if they're set by the person trying to achieve them, not forced upon them</li>
<li>It's about the process.  Achieving your goal is not the be-all and end-all - be careful to remember the progress you make along the way and give yourself credit for that too</li>
</ul>
<h1 id="tracking-goals">Tracking goals</h1>
<p>Once you've decided on your goals and told people that you're aiming for them, there are a couple of interesting ways I've found to track them:</p>
<h2 id="beeminder">Beeminder</h2>
<img src="/2017/03/06/Set-a-Goal/beeminder.png" alt="Beeminder" title="Beeminder">
<p><a href="https://www.beeminder.com/" target="_blank" rel="external">Beeminder</a> is a strange concept at first - they let you track your goals, with the added feature that if you fall behind, they fine you.  I was initially skeptical, but it's perfectly possible to use their site without risking a penny - and even then I find it very motivating<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p>
<p>Beeminder is great for ongoing tasks (like write a blog post per week) and also has special modes aimed at weight loss/gain.</p>
<p>I have a Beeminder account set up, and I'm currently tracking the following goals:</p>
<ul>
<li>Write a blog post at least once every 7 days for this site <img class="github-emoji" title="page_facing_up" alt="page_facing_up" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4c4.png?v7" height="20" width="20"></li>
<li>7 Korean study sessions per week <img class="github-emoji" title="kr" alt="kr" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v7" height="20" width="20"></li>
<li>At least 3 teetotal days per week <img class="github-emoji" title="beers" alt="beers" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f37b.png?v7" height="20" width="20"></li>
<li>100 press-ups per week <img class="github-emoji" title="muscle" alt="muscle" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f4aa.png?v7" height="20" width="20"></li>
</ul>
<p>So far (and this blog target nearly got me as I write this post), I've managed to keep up with all of these (and have done much better than I would have without this extra tracking/accountability).</p>
<p>I'm about to add another target, which is 10 minutes of stretching each day.  I'm super-inflexible! <img class="github-emoji" title="stuck_out_tongue" alt="stuck_out_tongue" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f61b.png?v7" height="20" width="20"></p>
<h2 id="habitica">Habitica</h2>
<img src="/2017/03/06/Set-a-Goal/habitica.png" alt="Habitica" title="Habitica">
<p><a href="https://habitica.com/" target="_blank" rel="external">Habitica</a> adds a role-playing slant to all this, where you gain experience, gold and items when you successfully complete tasks, and lose HP when you miss your targets.</p>
<p>Habitica is good (as the name implies) for trying to form habits (like drinking less, or exercising more) - but also for giving you an extra feeling of reward when you check off items on your &quot;to do&quot; list.</p>
<h1 id="final-thoughts">Final Thoughts</h1>
<ul>
<li>What goals have you set yourself?</li>
<li>How do you track your goals?</li>
<li>What motivates you most to achieve those goals?</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>In fact right now the only reason I'm writing this post is because my week is up to write this next post and Beeminder is hassling me... <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      A challenge to set yourself a goal
    
    </summary>
    
    
      <category term="challenge" scheme="https://zerotdev.com/tags/challenge/"/>
    
  </entry>
  
  <entry>
    <title>The Technology of this Blog</title>
    <link href="https://zerotdev.com/2017/02/26/The-Technology-of-this-Blog/"/>
    <id>https://zerotdev.com/2017/02/26/The-Technology-of-this-Blog/</id>
    <published>2017-02-26T11:57:58.000Z</published>
    <updated>2017-08-22T09:52:09.893Z</updated>
    
    <content type="html"><![CDATA[<p>This post aims to shed some light on how a blog is put together.  If you're already an experienced software developer, this will probably be very easy for you to find out for yourself (in fact you'll find many hundreds of alternatives too), but for everyone, here's a quick run-down of the technologies involved.</p>
<p>Starting from the beginning, the process looks something like this:</p>
<ul>
<li>I write the article in Markdown format</li>
<li>I use a tool called Hexo to turn this into an HTML blog</li>
<li>Then I deploy these pages to my personal GitHub account</li>
<li>Finally, I use DNS to set up my own personal domain to point at the GitHub pages</li>
</ul>
<h1 id="writing-the-content">Writing the Content</h1>
<p>This blog, like many content websites out there, is primarily text - with some markup (meaning headings, bullet points, links etc.) to make it look more interesting and feel more interactive.  There are many ways to write content, from crafting the HTML yourself<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> to using a much simpler text format which is then generated into a web-friendly format.</p>
<p>I prefer to write my content using <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="external">Markdown</a>, which takes away a great deal of the hassle, and allows me to focus on the text.  If you're interested, you can see this blog post in its original Markdown form <a href="https://raw.githubusercontent.com/CJTozer/CJTozer.github.io/blog/source/_posts/The-Technology-of-this-Blog.md" target="_blank" rel="external">here</a>.</p>
<p>I strongly recommend getting to know Markdown - I use it wherever I can.  Above and beyond ease of use, there are two other reasons I love it:</p>
<ul>
<li>Almost all modern text editors give you syntax highlighting support for Markdown.  At the moment I'm using the <a href="https://atom.io/" target="_blank" rel="external">Atom</a> editor, mainly because I'm also tweaking various JavaScript and CSS etc. files for the blog too.  I've also really enjoyed using <a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> when dealing with pure Markdown.</li>
<li>Markdown is extremely well-suited to maintaining your content under version control<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> - because it's just text, you can really easily track changes over time.  I have a habit of committing my work frequently, as I'm a little paranoid in that way!</li>
</ul>
<h1 id="blog-generation">Blog Generation</h1>
<p>Once I've got the content in Markdown format, I do need it to be converted into an HTML website, and this is where you'll find no end of options.  For no reason in particular, I decided to have a go with the <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> tool, which can manage a blog for you - converting your content into a website.</p>
<p>This tool makes it pretty simple to manage the process.  For example, to get this post written, I used these commands:</p>
<ul>
<li><code>hexo new draft &quot;The Technology of this Blog&quot;</code> - this creates the <code>The-Technology-of-this-Blog.md</code> file where I should put my content for this post.</li>
<li><code>hexo server --draft</code> - this lets me see my blog as it would look if I published this draft (so I can check how it looks without publishing yet).</li>
<li><code>hexo publish &quot;The Technology of this Blog&quot;</code> - when complete, this then moves the post from the drafts to the set of published posts.</li>
<li><code>hexo deploy -g</code> - this is used (in conjunction with a little config) to generate my blog website, and publish it to my personal <a href="https://pages.github.com/" target="_blank" rel="external">GitHub pages</a>.</li>
</ul>
<p>A couple of notes about Hexo:</p>
<ul>
<li>One of the reasons I chose it was that it seemed to have some pretty good themes available - see the <a href="https://hexo.io/themes/" target="_blank" rel="external">gallery</a>.  I use my own fixed/modified version of the Anisina theme.
<ul>
<li>The great thing about using a pre-packaged theme is that someone else has already done a lot of the hard work to make sure your blog will be well laid-out and readable on all manner of devices - from widescreen monitors to smartphones.</li>
</ul>
</li>
<li>Hexo (as is the case for most blogging tools) generates <em>static</em> webpages - this means that the content is generated up-front and can be handled easily.  If you need features like back-end authentication, or database access etc. (or if you want different pages to be available based on some external conditions), then this won't give you all that.  But for a blog, it's usually what you want - write some content, then publish it, end of story.</li>
</ul>
<h1 id="personal-domain">Personal Domain</h1>
<p>So at this point, I've got a blog published, and it's available on my <a href="https://CJTozer.github.io" target="_blank" rel="external">personal GitHub page</a>.  All that remains to get to where we are now is to host the blog on a different domain (in this case <a href="https://zerotdev.com">zerotdev.com</a>).</p>
<p>To do this, you first need to decide on, and then purchase the domain you want.  I used <a href="https://domains.google/" target="_blank" rel="external">Google domains</a> to both search for available domains, and to purchase (on an annual subscription) the domain I wanted.</p>
<h2 id="linking-it-all-together">Linking it all Together</h2>
<p>Finally, to link it all together, I needed to have requests for <a href="https://zerotdev.com">zerotdev.com</a> be pointed at the <a href="https://CJTozer.github.io" target="_blank" rel="external">GitHub pages site</a>, and also for the GitHub website to know that it was serving up the data on behalf of another domain.</p>
<p>This actually turned out to be slightly trickier than I'd hoped - and in the middle of it all I had some fun redirect loops where the two domains were infinitely redirecting the requests to each other!</p>
<p>As part of this, I decided to use <a href="https://www.cloudflare.com/" target="_blank" rel="external">Cloudflare</a> for my DNS <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>, as it also adds some extra security to help prevent my site being exploited.  If you're interested in the full process for setting this up, I won't repeat here, but I will point you at <a href="https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/" target="_blank" rel="external">the blog post that really helped me out</a>.</p>
<h1 id="final-thoughts">Final Thoughts</h1>
<ul>
<li>There are some great tools out there for making the process as easy as possible</li>
<li>Do you have a blog/website?  What tools do you use?  What do you think of them?</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Right-click anywhere on this page and choose 'view page source' to see what that would look like - not pretty! <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p>A later post will cover version control <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p>Domain Name Services - the part responsible for telling your browser where to look for e.g. <a href="https://zerotdev.com">zerotdev.com</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      A quick look at the tools I use to put this site together
    
    </summary>
    
    
      <category term="hexo" scheme="https://zerotdev.com/tags/hexo/"/>
    
      <category term="markdown" scheme="https://zerotdev.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Code Comprehension</title>
    <link href="https://zerotdev.com/2017/02/16/Code-Comprehension-Practice/"/>
    <id>https://zerotdev.com/2017/02/16/Code-Comprehension-Practice/</id>
    <published>2017-02-16T23:13:49.000Z</published>
    <updated>2017-08-22T09:52:09.891Z</updated>
    
    <content type="html"><![CDATA[<p>Reading code is such a fundamental part of being a developer, but often we take it completely for granted.  The ability to take unfamiliar source code, and turn it into a mental picture of what's going on is an absolutely essential - it's always getting exercise, for example:</p>
<ul>
<li>Learning a new area of code (a new component or brand-new project)</li>
<li>It's crucial for being able to do good code review</li>
<li>Without it, <em>efficient</em> debugging is impossible</li>
<li>Even writing designs, you'll often have to resort to reading code to working out the details the API docs don't tell you</li>
</ul>
<p>So, given that, what should you do if you find this is a hard skill to master?  What if you've not been able to just pick up the ability by osmosis?</p>
<h1 id="deliberate-practice">Deliberate Practice</h1>
<p>I propose one possible route to improvement: <a href="https://en.wikipedia.org/wiki/Practice_(learning_method)#Deliberate_practice" target="_blank" rel="external">Deliberate Practice</a>.  Deliberate practice is more commonly associated with skills like playing a musical instrument, but I've found success when using it to train people in very specific areas of software development, including this one.</p>
<p>By practicing on a very frequent basis, discussing progress, and getting input from a mentor, it's possible to take real strides forwards.  The method I have used is:</p>
<ul>
<li>Find 15 minutes <em>every</em> day to practice.  Ideally practice is done with a mentor/expert to provide input and advice.</li>
<li>Randomly choose a recently-changed file from the codebase (this way it's more likely that the code will have potential relevance).
<ul>
<li>Using Git to give a selection of 3 possibilities: <code>git diff --stat --name-only @{2.weeks.ago} | shuf | head -3</code>.</li>
</ul>
</li>
<li>Pick a sensible amount of code to focus on.
<ul>
<li>Depending on the level of the training, and the complexity of the code, this could mean going into all the details for a single function, or skimming a whole file at a higher level (both are valuable skills, so both should be practiced).</li>
</ul>
</li>
<li>Talk through the code as you think through it.
<ul>
<li>Don't sit there to try and work it out first - make it a conversation.</li>
</ul>
</li>
<li>Make sure you're thinking about the pointers below - and are getting education if the high-level picture isn't there.</li>
</ul>
<h2 id="pointers">Pointers</h2>
<p>To give you some idea what I think you want to be aiming for here, when you're really good at code comprehension, you should - when looking at a new area of code - be able to:</p>
<ul>
<li>Build up a high-level picture of the context for the code</li>
<li>Be explicit about any assumptions you're making about the code (and you will likely want to follow up on these later!)</li>
<li>Avoid getting stuck in a quagmire of detail - instead filtering so that you only dig into areas that are likely to be relevant to you</li>
</ul>
<h1 id="final-thoughts">Final Thoughts</h1>
<p>I believe practice can help.  What do you think?  What other skills do you think this kind of technique could help with?</p>
]]></content>
    
    <summary type="html">
    
      My method for improving code comprehension
    
    </summary>
    
    
      <category term="pro tips" scheme="https://zerotdev.com/tags/pro-tips/"/>
    
      <category term="deliberate practice" scheme="https://zerotdev.com/tags/deliberate-practice/"/>
    
  </entry>
  
  <entry>
    <title>Command Line 101</title>
    <link href="https://zerotdev.com/2017/02/12/Command-Line-101/"/>
    <id>https://zerotdev.com/2017/02/12/Command-Line-101/</id>
    <published>2017-02-12T19:07:45.000Z</published>
    <updated>2017-08-22T09:52:09.891Z</updated>
    
    <content type="html"><![CDATA[<p>Learning the command line is an extremely important skill for many occupations - especially for a developer.  Many tools are command-line only, some things are impossible (or nearly impossible) to achieve without using the command line - even when there is a graphical application that allows some of the same operations.</p>
<h1 id="tutorial">Tutorial</h1>
<p>Now, in this blog I don't intend to reinvent the wheel - if there's a good tutorial out there, I'll just point you at it.</p>
<p>So this is just a short post, and without further ado I think the <a href="https://www.learnenough.com/command-line-tutorial" target="_blank" rel="external">command-line tutorial</a> over at <em>Learn Enough</em> looks pretty good.  By looking through that tutorial, you should learn about:</p>
<ul>
<li>The basics of how commands work on the command line</li>
<li>Find out more about commands using <code>man</code> pages</li>
<li>Creating, modifying and inspecting files and directories</li>
</ul>
<h2 id="on-windows">On Windows</h2>
<p>Note that the above tutorial is focussed on Linux (or MacOS, which is relatively similar).  Windows command line is quite different (and generally less well-used, less fully-featured, and less well-documented).</p>
<p>On Windows I would recommend setting up <a href="https://msdn.microsoft.com/en-gb/commandline/wsl/about" target="_blank" rel="external">Bash on Ubuntu on Windows</a> (a feature in Windows 10 which gives you a Linux command-line on top of Windows) - then when you've learned the basics of using Linux, you'll find it much easier to search on the web for answers of how to do the same things on Windows.</p>
<h1 id="final-thoughts">Final Thoughts</h1>
<ul>
<li>The command line is a really useful tool - and especially if you're serious about writing code you should take the time to get comfortable with it</li>
<li>Let us know in the comments what your favourite command-line tool is, or let us know what the main challenge you've had to solve using the command-line is</li>
</ul>
]]></content>
    
    <summary type="html">
    
      A quick introduction to the command line - why it&#39;s important and what it can do
    
    </summary>
    
    
      <category term="command line" scheme="https://zerotdev.com/tags/command-line/"/>
    
  </entry>
  
  <entry>
    <title>Write your own tools</title>
    <link href="https://zerotdev.com/2017/02/03/Write-your-own-tools/"/>
    <id>https://zerotdev.com/2017/02/03/Write-your-own-tools/</id>
    <published>2017-02-03T23:28:16.000Z</published>
    <updated>2017-08-22T09:52:09.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="getting-started">Getting Started</h1>
<p>Learning to write code can be daunting.  I know some people who claim they would love to be able to write code (and I certainly believe they're telling the truth), but have never quite found it possible to get started.</p>
<p>Normally I've found that this comes down to two things:</p>
<ul>
<li>Not knowing where to start</li>
<li>Not having a <em>need</em> that forces them into it</li>
</ul>
<p>The second of these is simpler on the face of it - if there's no <em>need</em> to learn, chances are the motivation is harder to get.</p>
<p>Not knowing where to start is probably getting harder not easier these days - there's no shortage of really excellent tutorials, guides and books out there.  But which one do you pick?  And what if you choose the wrong one?</p>
<h1 id="see-a-need-fill-a-need">See a Need, Fill a Need</h1>
<img src="/2017/02/03/Write-your-own-tools/bigweld.jpg" alt="Bigweld" title="Bigweld">
<p>If you can think up a tool that you actually think you'd use, that's the perfect opportunity to force yourself to learn.  Depending on what you use your computer for, this tool might be:</p>
<ul>
<li>A script to rearrange documents, ensuring they are all consistently named</li>
<li>A script to copy updated files around to back them up</li>
<li>A tool to scrape the latest headline from a news site - or score for your favourite team, and display it</li>
<li>A countdown clock</li>
</ul>
<p>If you can't think of anything you'd actually use, then this is a harder problem.  You can try to pick an example similar to the above, or ask someone else for ideas for a tool that they might like.</p>
<h2 id="clear-vision">Clear Vision</h2>
<p>The next step is to make sure you actually have a really clear idea of what you're going to build.  You wouldn't start learning to cook by saying &quot;I'm going to learn how to make dinner&quot; - you'd pick a specific dish, make sure you knew what you were aiming for, and as a result you'd have a much higher chance of success.</p>
<p>Some examples of things you should consider before you start (and writing down the answers might be a good plan):</p>
<ul>
<li>What are the ways the tool is going to be used?  Pick the most important one, and you'll focus solely on that for the moment.</li>
<li>What are the inputs/information that your program will need?</li>
<li>Where is the tool going to run?  Do you need it to be a website?  Or is a simple command-line a better option?<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li>
</ul>
<h1 id="what-language-to-choose">What Language to Choose?</h1>
<p>Once you've got the picture of what you're going to build, it's time to decide how.  This in fact can be one of the most daunting parts of the whole process.</p>
<p>The good news is that <strong>there's no wrong answer</strong>.  Remember that the aim is to learn.  If you try using C to write a website, or Prolog to write a text-based adventure game, the chances are you'll find the going quite rough - but that you'll learn an awful lot along the way.</p>
<p>That said, given this is your first project, there's some advice I'd give here - all of which you're welcome to ignore if it doesn't fit with your vision.</p>
<ul>
<li>Start with a simple command-line tool, not a complex UI.  There are various good frameworks for making web pages or native applications, but my advice while you're learning to code is to stay slightly lower-level than that, so you can clearly see the effects of each line of code you write.</li>
<li>Pick a scripting language.  Depending on what skills you're actually trying to build, there are lots of options here, but I'm going to pick out three that tend to be quite easy to pick up.
<ul>
<li>In general, Python is a great choice - it's simple and versatile.  If there's no good reason to use the next two, Python is a great place to start.</li>
<li>If you know you want to be writing websites, then JavaScript is an essential tool, so you could get started with that.  There's a little more infrastructure to get started with JavaScript running from the command line (you'll need Node - <a href="https://developer.atlassian.com/blog/2015/11/scripting-with-node/" target="_blank" rel="external">here's</a> a good tutorial on the subject)</li>
</ul>
</li>
</ul>
<h1 id="final-thoughts">Final Thoughts</h1>
<ul>
<li>Pick a problem to solve or tool to build (ideally one you'd actually use)</li>
<li>Build a clear view of what your tool will be - and keep it simple to begin with!</li>
<li>Start with a simple scripting language</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>See my <a href="https://zerotdev.com/2017/02/12/Command-Line-101/">Command-line 101 post</a> for a brief intro to the command line. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      A look at how fixing your day-to-day problems can help you get started coding.
    
    </summary>
    
    
      <category term="pro tips" scheme="https://zerotdev.com/tags/pro-tips/"/>
    
      <category term="learn to code" scheme="https://zerotdev.com/tags/learn-to-code/"/>
    
  </entry>
  
  <entry>
    <title>Begin Again, Once More</title>
    <link href="https://zerotdev.com/2017/01/28/Begin-Again-Once-More/"/>
    <id>https://zerotdev.com/2017/01/28/Begin-Again-Once-More/</id>
    <published>2017-01-28T23:16:50.000Z</published>
    <updated>2017-08-22T09:52:09.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="welcome-to-my-blog">Welcome to my Blog</h1>
<h2 id="a-little-about-me">A Little about Me</h2>
<p>I've been a software developer for 10 years now.  I've learned a lot, and got plenty of things wrong along the way.</p>
<p>For my day job I work on high-performance, high-availability telephony systems.  In my spare time I'm a hobbyist with a plethora of half-finished projects.</p>
<p>I'm a geek.  I love food, anime, (some) e-sports, (some) real sports, learning languages (지금 한국을 배워요) and travel.</p>
<p>I'm passionate about training software developers.</p>
<h2 id="my-blog-goals">My Blog Goals</h2>
<p>This is my (second) attempt to start a regular blog.  I've not got on well with the idea of blogging before - and looking back I think that's at least in part because I wasn't clear with myself why I'm doing it.</p>
<p>So, this time I'm setting my goals out clearly up-front.</p>
<ul>
<li>Become a better software developer through the process of thinking about my blog posts, and of putting my thoughts to paper</li>
<li>Produce content that has potential value to others</li>
<li>Engage with the wider software development community, beyond my day job</li>
</ul>
<p>Some things that aren't goals for this blog:</p>
<ul>
<li>Building a legion of loyal followers</li>
<li>Making mega-bucks</li>
<li>Always being right</li>
</ul>
<h2 id="what-s-this-blog-about">What's this Blog About?</h2>
<p>There are 3 main topics I intend to focus on in this blog (though I'll probably digress at times).  These are:</p>
<ul>
<li>Software development</li>
<li>Developing as a developer</li>
<li>Developing developers</li>
</ul>
<h3 id="software-development">Software Development</h3>
<p>When I talk about blogging on &quot;Software Development&quot;, I mean talking about the low level mechanics of doing your job as a developer.</p>
<p>I'm not generally going to try to teach how to program in a specific language (there are many excellent resources out there already), but instead I expect the emphasis to be on:</p>
<ul>
<li>Tools of the trade (from IDEs to low-level libraries)</li>
<li>Tips &amp; tricks</li>
<li>Interesting projects (likely open source)</li>
<li>Reviews/discussions of resources I've found</li>
</ul>
<h3 id="developing-as-a-developer">Developing as a Developer</h3>
<p>By reaching out to read other developers' blogs, you're obviously making some effort to learn.</p>
<p>Articles in this category will be aimed at helping you discuss and discover better ways to improve faster.  I'll talk about:</p>
<ul>
<li>Getting over the beginner's hump (and becoming a proficient coder in the first place)</li>
<li>Ways to sharpen existing skills</li>
<li>Where to look for inspiration, or when you are looking for a new challenge</li>
</ul>
<h3 id="developing-developers">Developing Developers</h3>
<p>Articles under this heading will likely have some overlap with the previous one, but here the emphasis will be on those of us who have a role in developing our colleagues into excellent developers.</p>
<p>This may be mentoring a new recruit, leading an inexperienced team, or just trying to get even more out of your top-performers.</p>
<p>I don't expect to have any magic bullets here, but I do feel strongly that this is an extremely important (and often overlooked) part of being involved in an organisation that does software engineering.</p>
<h2 id="you-the-reader">You, the Reader</h2>
<p>Firstly, thank you so much for reading!</p>
<p>Please get involved in the conversation.  Let me know you're reading (and what you're interested in).  Tell me when you think I'm wrong!</p>
]]></content>
    
    <summary type="html">
    
      Introduction to me, and my blog.
    
    </summary>
    
    
  </entry>
  
</feed>
